[gd_resource type="VisualShader" load_steps=11 format=3 uid="uid://b8k6mr7qboute"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_1r0cs"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(255, 2, 255, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_nntt7"]
constant = 0.16

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_fi5ug"]
output_port_for_preview = 0
parameter_name = "TextureParameterTriplanar"

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_3r6or"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0), 2, Quaternion(1, 1, 1, 1)]
op_type = 5

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_sc6ki"]
constant = Color(0.435192, 0.435192, 0.435192, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_qoxkf"]
constant = Color(0.0505108, 0.0505108, 0.0505108, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_1easi"]
constant = Color(0.163907, 0.17087, 0.111621, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_0bm3j"]
constant = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_6pss6"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 1

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_ya08f"]
default_input_values = [0, Vector4(0, 0, 0, 0), 1, Vector4(1, 1, 1, 1), 2, Vector4(0, 0, 0, 0)]
op_type = 3

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D TextureParameterTriplanar;


// TextureParameterTriplanar
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// TextureParameterTriplanar
	{
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
}

void fragment() {
// ColorConstant:6
	vec4 n_out6p0 = vec4(0.163907, 0.170870, 0.111621, 1.000000);


// ColorConstant:7
	vec4 n_out7p0 = vec4(0.000000, 0.000000, 0.000000, 1.000000);


// VectorOp:8
	vec4 n_out8p0 = n_out6p0 - n_out7p0;


// TextureParameterTriplanar:2
	vec4 n_out2p0 = triplanar_texture(TextureParameterTriplanar, triplanar_power_normal, triplanar_pos);


// FloatConstant:11
	float n_out11p0 = 0.160000;


// VectorOp:10
	vec4 n_out10p0 = n_out2p0 * vec4(n_out11p0);


// MultiplyAdd:9
	vec4 n_out9p0 = fma(n_out8p0, n_out10p0, n_out7p0);


// Output:0
	ALBEDO = vec3(n_out9p0.xyz);
	ROUGHNESS = n_out2p0.x;


}
"
nodes/fragment/0/position = Vector2(1560, 380)
nodes/fragment/2/node = SubResource("VisualShaderNodeTextureParameterTriplanar_fi5ug")
nodes/fragment/2/position = Vector2(-420, 480)
nodes/fragment/3/node = SubResource("VisualShaderNodeClamp_3r6or")
nodes/fragment/3/position = Vector2(1120, 380)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorConstant_sc6ki")
nodes/fragment/4/position = Vector2(760, 520)
nodes/fragment/5/node = SubResource("VisualShaderNodeColorConstant_qoxkf")
nodes/fragment/5/position = Vector2(760, 420)
nodes/fragment/6/node = SubResource("VisualShaderNodeColorConstant_1easi")
nodes/fragment/6/position = Vector2(-200, 40)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorConstant_0bm3j")
nodes/fragment/7/position = Vector2(-200, 180)
nodes/fragment/8/node = SubResource("VisualShaderNodeVectorOp_6pss6")
nodes/fragment/8/position = Vector2(160, -80)
nodes/fragment/9/node = SubResource("VisualShaderNodeMultiplyAdd_ya08f")
nodes/fragment/9/position = Vector2(560, 60)
nodes/fragment/10/node = SubResource("VisualShaderNodeVectorOp_1r0cs")
nodes/fragment/10/position = Vector2(160, 280)
nodes/fragment/11/node = SubResource("VisualShaderNodeFloatConstant_nntt7")
nodes/fragment/11/position = Vector2(-220, 360)
nodes/fragment/connections = PackedInt32Array(5, 0, 3, 1, 4, 0, 3, 2, 2, 0, 0, 3, 6, 0, 8, 0, 7, 0, 8, 1, 8, 0, 9, 0, 9, 0, 0, 0, 2, 0, 10, 0, 11, 0, 10, 1, 10, 0, 9, 1, 7, 0, 9, 2)
